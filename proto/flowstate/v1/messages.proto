syntax = "proto3";

package flowstate.v1;

message State {
  string id = 1;
  int64 rev = 2;
  map<string, string> annotations = 3;
  map<string, string> labels = 4;
  int64 committed_at_unix_milli = 5;
  Transition transition = 6;
}

message StateCtx {
  State committed = 1;
  State current = 2;
  repeated Transition transitions = 3;
}

message StateCtxRef {
  int64 idx = 1;
}

message DelayedState {
  State state = 1;
  int64 offset = 2;
  int64 execute_at_sec = 3;
}

message Transition {
  string from = 1;
  string to = 2;
  map<string, string> annotations = 3;
}

message Data {
  string id = 1;
  int64 rev = 2;
  bool binary = 3;
  string b = 4;
}

message DataRef {
  int64 idx = 1;
}

message Command {
  repeated StateCtx state_ctxs = 1;
  repeated Data datas = 2;

  TransitCommand transit = 3;
  PauseCommand pause = 4;
  ResumeCommand resume = 5;
  EndCommand end = 6;
  ExecuteCommand execute = 7;
  DelayCommand delay = 8;
  CommitCommand commit = 9;
  NoopCommand noop = 10;
  StackCommand stack = 11;
  UnstackCommand unstack = 12;
  AttachDataCommand attach_data = 13;
  GetDataCommand get_data = 14;
  GetStateByIDCommand get_state_by_id = 17;
  GetStateByLabelsCommand get_state_by_labels = 18;
  GetStatesCommand get_states = 19;
  GetDelayedStatesCommand get_delayed_states = 20;
  CommitStateCtxCommand commit_state = 21;
}

message TransitCommand {
  StateCtxRef state_ref = 1;
  string to = 2;
}

message PauseCommand {
  StateCtxRef state_ref = 1;
  string to = 2;
}

message ResumeCommand {
  StateCtxRef state_ref = 1;
}

message EndCommand {
  StateCtxRef state_ref = 1;
}

message ExecuteCommand {
  StateCtxRef state_ref = 1;
}

message DelayCommand {
  StateCtxRef state_ref = 1;
  State delaying_state = 2;
  int64 execute_at_sec = 3;
  bool commit = 4;
}

message CommitCommand {
  repeated Command commands = 1;
}

message NoopCommand {
  StateCtxRef state_ref = 1;
}

message StackCommand {
  StateCtxRef carrier_state_ref = 1;
  StateCtxRef stack_state_ref = 2;
  string annotation = 3;
}

message UnstackCommand {
  StateCtxRef carrier_state_ref = 1;
  StateCtxRef unstack_state_ref = 2;
  string annotation = 3;
}

message AttachDataCommand {
  StateCtxRef state_ref = 1;
  DataRef data_ref = 2;
  string alias = 3;
  bool commit = 4;
}

message GetDataCommand {
  StateCtxRef state_ref = 1;
  DataRef data_ref = 2;
  string alias = 3;
}

message GetStateByIDCommand {
  string id = 1;
  int64 rev = 2;
  StateCtxRef state_ref = 3;
}

message GetStateByLabelsCommand {
  map<string, string> labels = 1;
  StateCtxRef state_ref = 2;
}

message GetStatesCommand {
  message Labels {
    map<string, string> labels = 1;
  }

  int64 since_rev = 1;
  int64 since_time_usec = 2;
  repeated Labels labels = 3;
  bool latest_only = 4;
  int64 limit = 5;

  GetStatesResult result = 6;
}

message GetStatesResult {
  repeated State states = 1;
  bool more = 2;
}

message GetDelayedStatesCommand {
  int64 since_time_sec = 1;
  int64 until_time_sec = 2;
  int64 offset = 3;
  int64 limit = 4;

  GetDelayedStatesResult result = 5;
}

message GetDelayedStatesResult {
  repeated DelayedState delayed_states = 1;
  bool more = 2;
}

message CommitStateCtxCommand {
  StateCtxRef state_ref = 1;
}
